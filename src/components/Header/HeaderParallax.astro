---
const { height = "80vh", title = "青花卓越" } = Astro.props;

const headerData = {
  logo: "/assets/images/icons/mstile-310x310.png",
  title,
  subtitle: "[ 网站建设 · 网站开发 · SEO优化 ]",
  expand: "青花卓越专注于为中小企业提供高性价比的网站建设与SEO服务",
  contact: {
    phone: "18883919122",
    email: "504677424@qq.com",
  },
  bgImage: "/assets/images/bg.png",
  girlImage: "/assets/images/girl.png",
};
---

<div
  class="header-content"
  style="--header-height: 30vh;"
  data-height={height}
  data-bg={headerData.bgImage}
  data-girl={headerData.girlImage}
>
  <div
    class="parallaxbg"
    style={`background-image: linear-gradient(60deg, rgba(36, 23, 87, 0.9), rgba(10, 87, 97, 0.8)), url(${headerData.bgImage})`}
  >
  </div>
  <div class="girl" style={`background-image: url(${headerData.girlImage})`}>
  </div>

  <div class="header-title">
    <a href="/" class="logo-link">
      <div class="headerLogo">
        <img src={headerData.logo} alt={headerData.title} />
        <h1 class="logoText">{headerData.title}</h1>
      </div>
    </a>
    <div class="headerText">
      <h1>{headerData.subtitle}</h1>
      <p>{headerData.expand}</p>
      <h3>
        <i class="fas fa-phone-alt"></i> {headerData.contact.phone}
        <i class="fas fa-envelope"></i> {headerData.contact.email}
      </h3>
    </div>
    <div class="look3d">
      <a href="/assets/3dlook/case/x50/index.html"><span>特色三维网站</span></a>
    </div>
  </div>

  <slot name="waves" />
  <slot name="menu" />
</div>

<style>

  a {
    text-decoration: none;
    color: inherit;
    outline: none;
    cursor: pointer;
    -webkit-tap-highlight-color: transparent;
  }

  a:focus {
    outline: none;
  }

  .header-content {
    height: var(--header-height);
    transition: height 1s ease;
    position: relative;
    width: 100%;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    text-align: center;
  }



  .parallaxbg {
    position: absolute;
    width: 110%;
    height: 110%;
    background-size: cover;
    background-position: center;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    will-change: transform;
  }

  .girl {
    position: absolute;
    bottom: 0;
    width: 38%;
    height: 38vh;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    animation: girlLook 2s ease-in-out infinite alternate;
    opacity: 0.9;
  }

  @keyframes girlLook {
    to {
      transform: translateY(3%);
    }
  }

  .header-title {
    position: absolute;
    width: 100%;
    height: var(--header-height);
    background-color: rgba(0, 0, 0, 0.3);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    padding-top: 2em;
    opacity: 0;
    transition: opacity 1s ease;
  }

 
  .headerLogo {
    width: 5em;
    height: 5em;
    margin-bottom: 5em;
  }

  .headerLogo img {
    width: 100%;
    height: 100%;
  }

  .headerLogo .logoText {
    font-size: 1.2em;
    line-height: 1em;
    opacity: 0.5;
  }

  .headerText h1 {
    font-size: 2em;
    line-height: 1em;
    margin: 0.3em 0;
  }
  
  .headerText p {
    opacity: 1.2;
    opacity: 0.5;
  }

  .headerText h3 {
    margin-top: 1em;
    font-size: 1.2em;
  }


  @property --＠color-1 {
    syntax: "<color>";
    inherits: false;
    initial-value: hsl(98 100% 62%);
  }

  @property --＠color-2 {
    syntax: "<color>";
    inherits: false;
    initial-value: hsl(204 100% 59%);
  }

  @keyframes gradient-change {
    to {
      --＠color-1: hsl(210 100% 59%);
      --＠color-2: hsl(310 100% 59%);
    }
  }

  .header-content .headerText h1,
  .header-content .headerText h3 {
    animation: gradient-change 2s linear infinite alternate;
    background: linear-gradient(
      to right in oklch,
      var(--＠color-1),
      var(--＠color-2)
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
    margin: 0;
    text-wrap: balance;
  }


.look3d {
  position: relative;
  width: 100%;
  height: 100px;
  margin-top: 3rem;
  /* background-color: rgb(13, 105, 18); */
  display: flex;
  justify-content: center;
  align-items: center;

}


.look3d a {
  position: relative;
  display: inline-block;
  width: 380px;
  padding: 0.5rem 2rem;
  font-size: 2rem;
  border-radius: 100px;
  border: 4px solid transparent; /* 先透明边框，给空间 */

  /* 伪元素实现动态彩虹边框 */
  z-index: 0;
  overflow: visible;
  color: rgba(240, 248, 255, 0.5);
}

.look3d a:hover {
  color: rgba(240, 248, 255, 0.9);
}

.look3d a::before {
  content: "";
  position: absolute;
  top: -4px; left: -4px; right: -4px; bottom: -4px;
  border-radius: 100px;
  padding: 2px; /* 边框宽度 */
  background: linear-gradient(
    270deg,
      var(--＠color-1),
      var(--＠color-2)

  );
  background-size: 100% 100%;
  animation: rainbowBorder 8s linear infinite;
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  z-index: -1;
  pointer-events: none;
}

@keyframes rainbowBorder {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 100% 50%;
  }
}






</style>

<script>
  class ParallaxHeader {
    constructor() {
      this.header = document.querySelector(".header-content");
      this.headerHeight = this.header?.dataset?.height;
      this.headerTitle = document.querySelector(".header-title");

      this.bgUrl = this.header?.dataset?.bg;
      this.girlUrl = this.header?.dataset?.girl;
      this.parallaxBg = document.querySelector(".parallaxbg");
      this.girl = document.querySelector(".girl");
      this.rafId = null;
      this.lastMove = { x: 0, y: 0 };
    }

    loadImage(url) {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.src = url;
        img.onload = resolve;
        img.onerror = reject;
      });
    }

    async init() {
      try {
        await Promise.all([
          this.loadImage(this.bgUrl),
          this.loadImage(this.girlUrl),
        ]);
      } catch (err) {
        console.warn("图片加载失败，但仍继续动画");
      }

      if (this.header) {
        setTimeout(() => {
          this.header.style.setProperty("--header-height", this.headerHeight);
          this.headerTitle.style.opacity = 1;
        }, 300);
      }

      if (this.parallaxBg) {
        this.applyParallax(this.parallaxBg, {
          intensity: 0.5,
          center: true,
          axis: "xy",
        });
      }

      if (this.girl) {
        this.applyParallax(this.girl, {
          intensity: 0.05,
          center: false,
          axis: "x",
        });
      }
    }

    applyParallax(element, options = {}) {
      const config = Object.assign(
        {
          intensity: 0.1,
          center: false,
          axis: "xy",
        },
        options,
      );

      const initialTransform = window.getComputedStyle(element).transform;

      const updatePosition = () => {
        const max = this.getMaxMovement(element);
        const moveX = config.axis.includes("x")
          ? this.lastMove.x * max.x * config.intensity
          : 0;
        const moveY = config.axis.includes("y")
          ? this.lastMove.y * max.y * config.intensity
          : 0;

        let transform = config.center
          ? `translate(-50%, -50%) translate(${-moveX}px, ${-moveY}px)`
          : `${initialTransform} translate(${-moveX}px, ${-moveY}px)`;

        element.style.transform = transform;
        this.rafId = null;
      };

      const handleMove = (e) => {
        const clientX = e.clientX ?? e.touches?.[0]?.clientX;
        const clientY = e.clientY ?? e.touches?.[0]?.clientY;
        if (clientX == null || clientY == null) return;

        this.lastMove = {
          x: (clientX / window.innerWidth - 0.5) * 2,
          y: (clientY / window.innerHeight - 0.5) * 2,
        };

        if (!this.rafId) this.rafId = requestAnimationFrame(updatePosition);
      };

      window.addEventListener("mousemove", handleMove);
      window.addEventListener("touchmove", handleMove, { passive: true });

      this.cleanup = () => {
        window.removeEventListener("mousemove", handleMove);
        window.removeEventListener("touchmove", handleMove);
        if (this.rafId) cancelAnimationFrame(this.rafId);
        element.style.transform = initialTransform;
      };
    }

    getMaxMovement(element) {
      const parent = element.parentElement || document.documentElement;
      return {
        x: (element.offsetWidth - parent.offsetWidth) / 2,
        y: (element.offsetHeight - parent.offsetHeight) / 2,
      };
    }

    destroy() {
      if (this.cleanup) this.cleanup();
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const ph = new ParallaxHeader();
    ph.init();
  });
</script>
