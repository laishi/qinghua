---
import PanolensViewer from './PanolensViewer.astro';

const { height = "80vh", title = "青花卓越" } = Astro.props;

const headerData = {
  logo: "/assets/images/icons/mstile-310x310.png",
  title,
  subtitle: "[ 网站建设 · 网站开发 · SEO优化 ]",
  expand: "青花卓越专注于为中小企业提供高性价比的网站建设与SEO服务",
  contact: {
    phone: "18883919122",
    email: "504677424@qq.com",
  },
  bgImage: "/assets/images/bg.png",
  girlImage: "/assets/images/girl.png",
};

// const panoramaImage = "https://raw.githubusercontent.com/pchen66/panolens.js/dev/example/asset/textures/equirectangular/sunset.jpg";
// const panoramaImage = "";
// const panoramaImage = "";
// const panoramaImage = "";
const panoramaImage = "https://cdn.polyhaven.com/asset_img/primary/stierberg_sunrise.png?height=2048&quality=95";


---

<div
  class="header-content"
  style="--header-height: 30vh;"
  data-height={height}
  data-bg={headerData.bgImage}
  data-girl={headerData.girlImage}
>
  <div class="parallaxbgs" style="position: absolute; width: 100%; height: 100%; top: 50%; left: 50%; transform: translate(-50%, -50%); will-change: transform;">
    <PanolensViewer
      image={panoramaImage}
      data-image={panoramaImage}
    />
  </div>
  <div class="girl" style={`background-image: url(${headerData.girlImage})`}></div>

  <div class="header-title">
    <a href="/" class="logo-link">
      <div class="headerLogo">
        <img src={headerData.logo} alt={headerData.title} loading="eager" />
        <h1 class="logoText">{headerData.title}</h1>
      </div>
    </a>
    <div class="headerText">
      <h1>{headerData.subtitle}</h1>
      <p>{headerData.expand}</p>
      <h3>
        <i class="fas fa-phone-alt"></i> {headerData.contact.phone}
        <i class="fas fa-envelope"></i> {headerData.contact.email}
      </h3>
    </div>
  </div>

  <slot name="menu" />
  <slot name="waves" />
</div>

<style>
  a {
    text-decoration: none;
    color: inherit;
    outline: none;
    cursor: pointer;
    /* -webkit-tap-highlight-color: transparent; */
  }

  a:focus {
    outline: none;
  }

  .header-content {
    height: var(--header-height);
    transition: height 1s ease;
    position: relative;
    width: 100%;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    text-align: center;
  }

  .parallaxbg {
    position: absolute;
    width: 110%;
    height: 110%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    will-change: transform;
  }

  .girl {
    position: absolute;
    bottom: 0;
    width: 38%;
    height: 38vh;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    animation: girlLook 2s ease-in-out infinite alternate;
    opacity: 0.9;
  }

  @keyframes girlLook {
    to {
      transform: translateY(3%);
    }
  }

  .header-title {
    position: absolute;
    width: 100%;
    height: var(--header-height);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    padding-top: 2em;
    opacity: 0;
    transition: opacity 1s ease;
    z-index: 10;
  }

  .headerLogo {
    width: 5em;
    height: 5em;
    margin-bottom: 5em;
  }

  .headerLogo img {
    width: 100%;
    height: 100%;
  }

  .headerLogo .logoText {
    font-size: 1.2em;
    line-height: 1em;
    opacity: 0.5;
  }

  .headerText h1 {
    font-size: 2em;
    line-height: 1em;
    margin: 0.3em 0;
  }

  .headerText p {
    opacity: 0.5;
  }

  .headerText h3 {
    margin-top: 1em;
    font-size: 1.2em;
  }

  @property --＠color-1 {
    syntax: "<color>";
    inherits: false;
    initial-value: hsl(98 100% 62%);
  }

  @property --＠color-2 {
    syntax: "<color>";
    inherits: false;
    initial-value: hsl(204 100% 59%);
  }

  @keyframes gradient-change {
    to {
      --＠color-1: hsl(210 100% 59%);
      --＠color-2: hsl(310 100% 59%);
    }
  }

  .header-content .headerText h1,
  .header-content .headerText h3 {
    animation: gradient-change 2s linear infinite alternate;
    background: linear-gradient(
      to right in oklch,
      var(--＠color-1),
      var(--＠color-2)
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
    margin: 0;
    text-wrap: balance;
  }

  @layer demo.support {
    .header-content .headerText h1 {
      font-size: 5vmin;
      line-height: 1.25cap;
    }

    .header-content .headerText h3 {
      font-size: min(200%, 4vmin);
      line-height: 1.5;
    }

    .header-content .headerText h3 i {
      margin-right: 0.5em;
    }
  }
</style>

<script>
  function initializeParallaxHeader() {
    // 使用局部变量，避免全局作用域问题
    const header = document.querySelector(".header-content");
    const headerHeight = header?.dataset?.height || "80vh";
    const headerTitle = document.querySelector(".header-title");
    const bgUrl = header?.dataset?.bg || "";
    const girlUrl = header?.dataset?.girl || "";
    const parallaxBg = document.querySelector(".parallaxbg");
    const girl = document.querySelector(".girl");
    let rafId = null;
    let lastMove = { x: 0, y: 0 };
    let cleanup = null;

    const loadImage = (url) => {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.src = url;
        img.loading = "eager"; // 强制立即加载
        img.onload = () => resolve();
        img.onerror = () => reject();
      });
    };

    const init = async () => {
      // 检查 header 是否存在
      if (!header) {
        console.error("未找到 .header-content 元素");
        return;
      }

      try {
        await Promise.all([
          loadImage(bgUrl),
          loadImage(girlUrl),
        ]).catch((err) => {
          console.warn("图片加载失败，但继续执行动画:", err);
        });

        // 设置 header 高度和标题透明度
        setTimeout(() => {
          header.style.setProperty("--header-height", headerHeight);
          if (headerTitle) {
            headerTitle.style.opacity = "1";
          } else {
            console.warn("未找到 .header-title 元素");
          }
        }, 300);

        // 对 parallaxBg 应用视差效果
        if (parallaxBg) {
          applyParallax(parallaxBg, {
            intensity: 0.1, // 降低强度，测试 WebGL 兼容性
            center: true,
            axis: "xy",
          });
        } else {
          console.warn("未找到 .parallaxbg 元素");
        }

        // 对 girl 应用视差效果
        if (girl) {
          applyParallax(girl, {
            intensity: 0.05,
            center: false,
            axis: "x",
          });
        } else {
          console.warn("未找到 .girl 元素");
        }
      } catch (err) {
        console.error("初始化失败:", err);
      }
    };

    const applyParallax = (element, options = {}) => {
      const config = {
        intensity: options.intensity || 0.1,
        center: options.center || false,
        axis: options.axis || "xy",
      };

      const initialTransform = window.getComputedStyle(element).transform;

      const updatePosition = () => {
        const max = getMaxMovement(element);
        const moveX = config.axis.includes("x") ? lastMove.x * max.x * config.intensity : 0;
        const moveY = config.axis.includes("y") ? lastMove.y * max.y * config.intensity : 0;

        let transform = config.center
          ? `translate(-50%, -50%) translate(${-moveX}px, ${-moveY}px)`
          : `${initialTransform} translate(${-moveX}px, ${-moveY}px)`;

        element.style.transform = transform;
        rafId = null;
      };

      const handleMove = (e) => {
        const clientX = e.clientX ?? e.touches?.[0]?.clientX;
        const clientY = e.clientY ?? e.touches?.[0]?.clientY;
        if (clientX == null || clientY == null) return;

        lastMove = {
          x: (clientX / window.innerWidth - 0.5) * 2,
          y: (clientY / window.innerHeight - 0.5) * 2,
        };

        if (!rafId) rafId = requestAnimationFrame(updatePosition);
      };

      window.addEventListener("mousemove", handleMove, { passive: true });
      window.addEventListener("touchmove", handleMove, { passive: true });

      cleanup = () => {
        window.removeEventListener("mousemove", handleMove);
        window.removeEventListener("touchmove", handleMove);
        if (rafId) cancelAnimationFrame(rafId);
        element.style.transform = initialTransform;
      };
    };

    const getMaxMovement = (element) => {
      const parent = element.parentElement || document.documentElement;
      return {
        x: (element.offsetWidth - parent.offsetWidth) / 2,
        y: (element.offsetHeight - parent.offsetHeight) / 2,
      };
    };

    const destroy = () => {
      if (cleanup) cleanup();
    };

    // 执行初始化
    init();
    return { destroy };
  }

  // 确保 DOM 加载完成后再初始化
  document.addEventListener("DOMContentLoaded", () => {
    try {
      initializeParallaxHeader();
    } catch (err) {
      console.error("ParallaxHeader 初始化失败:", err);
    }
  });
</script>